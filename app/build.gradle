import ru.redmadrobot.movie_app.Dependencies

apply plugin: 'com.android.application'

apply plugin: 'com.google.gms.google-services'

apply from: rootProject.file('common-android-library.gradle')

android {
    defaultConfig {
        applicationId build_versions.app_id
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.version_code
        versionName build_versions.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            versionNameSuffix '-debug'

            debuggable true

            minifyEnabled false
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            versionNameSuffix ""
            debuggable false

            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "movie_app-${variant.name}-${variant.versionName}(${variant.versionCode}).apk"
        }
    }
}

dependencies {
    implementation project(":common")

    implementation project(":core:android")
    implementation project(":core:network")
    implementation project(':core:persist')

    implementation project(":feature:auth")
    implementation project(':feature:movie_list')
    implementation project(":feature:movie_detail")
    implementation project(':feature:profile')

    implementation(
            Dependencies.Kotlin,

            Dependencies.Lifecycle,

            Dependencies.Material,

            Dependencies.Navigation.Fragment,
            Dependencies.Navigation.UI_KTX,

            Dependencies.Constraint_layout,

            Dependencies.Dagger.Dagger,

            Dependencies.RxJava,

            Dependencies.Retrofit,
    )

    compileOnly(Dependencies.Dagger.AssistedInject)

    kapt(
            Dependencies.Dagger.Processor,
            Dependencies.Dagger.AssistedInjectProcessor,
    )
}
